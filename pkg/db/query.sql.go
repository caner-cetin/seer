// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const getLanguageCount = `-- name: GetLanguageCount :one
SELECT COUNT(id)
FROM languages
`

func (q *Queries) GetLanguageCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getLanguageCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLanguages = `-- name: GetLanguages :many
SELECT id, name, fs_name, type, aliases, ace_mode, codemirror_mode, codemirror_mime_type, wrap, extensions, filenames, interpreters, language_id, color, tm_scope, "group"
FROM languages
`

func (q *Queries) GetLanguages(ctx context.Context) ([]Language, error) {
	rows, err := q.db.Query(ctx, getLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FsName,
			&i.Type,
			&i.Aliases,
			&i.AceMode,
			&i.CodemirrorMode,
			&i.CodemirrorMimeType,
			&i.Wrap,
			&i.Extensions,
			&i.Filenames,
			&i.Interpreters,
			&i.LanguageID,
			&i.Color,
			&i.TmScope,
			&i.Group,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
